{"version":3,"sources":["status.js","api.js","actions.js","reducers.js","store.js","components/icon.js","components/pagination.js","components/resource-status.js","components/history-item.js","App.js","index.js"],"names":["src_status","OK","LOADING","ERROR","window","networkConditions","offline","serverIntermitent","latency","data","Array","fill","map","_","i","to","String","Math","random","substring","date","Date","now","type","floor","totalPages","length","fetch","url","Promise","resolve","reject","startsWith","TypeError","setTimeout","round","Response","JSON","stringify","message","status","_url$split","split","_url$split2","Object","slicedToArray","qs","page","queryString","parse","trimStart","trimEnd","body","meta","parseInt","perPage","pages","slice","then","catch","APIResponseError","Error","api","getData","_getData","asyncToGenerator","regenerator_default","a","mark","_callee","response","error","wrap","_context","prev","next","concat","sent","ok","json","abrupt","t0","stop","this","_x","apply","arguments","callHistoryActions","DATA_LOADED","DATA_REQUESTED","DATA_ERROR","dataLoaded","payload","getCallHistory","undefined","_ref","dispatch","API","initialState","isInitalState","pagination","createStore","state","action","isInitialState","objectSpread","applyMiddleware","thunk","Icon","children","react_default","createElement","className","PaginationButton","disabled","active","onClick","text","classNames","Pagination","_ref2","isLoading","changePage","pagination_PaginationButton","icon","key","big","tryAgain","LoadingBar","style","transform","ResourceStatus","_ref3","_feedbackComponents","callHistory","feedbackComponents","defineProperty","resource_status_Error","resource_status_LoadingBar","HistoryItem","toLocaleDateString","toLocaleTimeString","App","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","_this2","resource_status","assign","item","history_item","renderInitialState","renderApp","React","Component","ConnectedApp","connect","bindActionCreators","ReactDOM","render","es","store","document","getElementById"],"mappings":"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","file":"static/js/main.868ea306.chunk.js","sourcesContent":["export default {\r\n  OK: 'ok',\r\n  LOADING: 'loading',\r\n  ERROR: 'error'\r\n};\r\n","import queryString from 'query-string';\r\n\r\n/* ----------------------------------------------------------------------- */\r\n/* THERE IS A LOT OF MOCKING IN THIS FILE. JUMP TO LINE 80ish TO SKIP THEM */\r\n/* ----------------------------------------------------------------------- */\r\n\r\nwindow.networkConditions = {\r\n  offline: false,\r\n  serverIntermitent: false,\r\n  latency: 400,\r\n};\r\n\r\n/* ----------------------------------------------------------------------- */\r\n/* THIS IS THE DATA MOCK. THERE IS NO REAL API. I'M SO SORRY  */\r\n/* ----------------------------------------------------------------------- */\r\n\r\nconst data = new Array(100).fill().map((_, i) => ({\r\n  to: String(Math.random()).substring(2, 12),\r\n  date: Date.now() + 100000 * i,\r\n  type: [\r\n    'call_missed',\r\n    'call_missed_outgoing',\r\n    'call_made',\r\n    'call_received'\r\n  ][Math.floor(Math.random() * 4)]\r\n}));\r\n\r\nconst perPage = 10;\r\nconst totalPages = data.length / perPage;\r\n\r\n\r\n/* ---------------------------------------------------------------------- */\r\n/*   I'M MOCKING FETCH AS WELL. fetch-mock WOULDNT HANDLE QUERY PARAMS    */\r\n/*      THE WAY I NEEDED. DIDNT BOTHER LOOKING FOR OTHER OPTIONS          */\r\n/* ---------------------------------------------------------------------- */\r\n\r\nconst fetch = (url) => new Promise((resolve, reject) => {\r\n  if (!url.startsWith('https://api.fakevox.com/callhistory')) {\r\n    window.fetch(url).then(resolve).catch(reject);\r\n    return;\r\n  }\r\n\r\n  if (window.networkConditions.offline) {\r\n    reject(new TypeError('Failed to fetch'));\r\n    return;\r\n  }\r\n\r\n  setTimeout(() => {\r\n    if (window.networkConditions.serverIntermitent) {\r\n      if (Math.round(Math.random())) {\r\n        resolve(\r\n          new Response(\r\n            JSON.stringify({ message: 'Internal Server Error. Please try again'}),\r\n            { status: 500 }\r\n          )\r\n        );\r\n      }\r\n    }\r\n\r\n    const [ baseUrl, qs ] = url.split('?');\r\n    const { page } = queryString.parse(qs);\r\n    const trimStart = (page - 1) * perPage;\r\n    const trimEnd = trimStart + perPage;\r\n\r\n    const body = {\r\n      meta: {\r\n        page: parseInt(page),\r\n        perPage,\r\n        pages: totalPages\r\n      },\r\n      data: data.slice(trimStart, trimEnd)\r\n    };\r\n\r\n    resolve(new Response(JSON.stringify(body), { type: 'text/json' }))\r\n  }, window.networkConditions.latency || 400);\r\n\r\n});\r\n\r\n/* ---------------------------------------------------------------------- */\r\n/*         THIS IS WHERE A NORMAL API WRAPPER FILE WOULD START            */\r\n/* ---------------------------------------------------------------------- */\r\n\r\nclass APIResponseError extends Error {};\r\n\r\nexport default {\r\n  async getData(page) {\r\n    const url = `https://api.fakevox.com/callhistory?page=${page}`;\r\n\r\n    try {\r\n      const response = await fetch(url);\r\n      if (!response.ok) {\r\n        const error = await response.json();\r\n        // here, I know that the error response has a message property.\r\n        // you need to learn how to handle the errors the service returns.\r\n        throw new APIResponseError(error.message);\r\n      }\r\n\r\n      return response.json();\r\n    } catch (e) {\r\n      if (e instanceof APIResponseError) {\r\n        // just rethrow the error we created up there\r\n        throw e;\r\n      }\r\n\r\n      // fetch only throws TypeError: Failed to fetch.\r\n      // either the URL was not resolved by any DNS or\r\n      // the client has a connection problem. You know\r\n      // the service exists (otherwise why would you be expecting to use it?)\r\n      // so it's probably a problem in the client\r\n      throw new Error(\r\n        'We couldn\\'t connect to the service. Check your internet connection'\r\n      );\r\n    }\r\n  }\r\n};\r\n","import API from './api';\r\n\r\nexport const callHistoryActions = {\r\n  DATA_LOADED: 'loaded',\r\n  DATA_REQUESTED: 'requested',\r\n  DATA_ERROR: 'error'\r\n};\r\n\r\nconst dataError = (error) => ({\r\n  type: callHistoryActions.DATA_ERROR,\r\n  payload: { error }\r\n});\r\n\r\nconst dataRequested = () => ({\r\n  type: callHistoryActions.DATA_REQUESTED,\r\n  payload: {}\r\n});\r\n\r\nconst dataLoaded = (response) => ({\r\n  type: callHistoryActions.DATA_LOADED,\r\n  payload: response\r\n});\r\n\r\nexport const getCallHistory = (page = 1) => async (dispatch) => {\r\n  dispatch(dataRequested());\r\n\r\n  try {\r\n    const response = await API.getData(page);\r\n    dispatch(dataLoaded(response));\r\n  } catch (e) {\r\n    dispatch(dataError(e));\r\n  }\r\n};\r\n","import status from './status';\r\nimport { callHistoryActions } from './actions';\r\n\r\nconst initialState = {\r\n  isInitalState: true,\r\n  status: status.OK,\r\n  data: [],\r\n  error: {},\r\n  pagination: {}\r\n};\r\n\r\nexport default function callHistoryReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case callHistoryActions.DATA_LOADED:\r\n      return {\r\n        status: status.OK,\r\n        data: action.payload.data,\r\n        pagination: action.payload.meta,\r\n        error: null,\r\n        isInitialState: false\r\n      };\r\n    case callHistoryActions.DATA_REQUESTED:\r\n      return {\r\n        ...state,\r\n        status: status.LOADING,\r\n        error: null\r\n      };\r\n    case callHistoryActions.DATA_ERROR:\r\n      return {\r\n        ...state,\r\n        status: status.ERROR,\r\n        error: action.payload.error\r\n      };\r\n    case 'reset':\r\n      return initialState;\r\n  }\r\n\r\n  return state;\r\n}\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport callHistoryReducer from './reducers';\r\n\r\nexport default createStore(callHistoryReducer, applyMiddleware(thunk));\r\n","import React from 'react';\r\n\r\nconst Icon = ({ children }) => (\r\n  <i className={`material-icons ${children}`}>{children}</i>\r\n);\r\n\r\nexport default Icon;\r\n","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport Icon from 'components/icon';\r\n\r\nconst PaginationButton = ({ disabled, active, onClick, text }) => (\r\n  <button\r\n    className={classNames(\r\n      'pagination-button',\r\n      { active }\r\n    )}\r\n    disabled={ disabled }\r\n    onClick={onClick}\r\n  >\r\n    {text}\r\n  </button>\r\n);\r\n\r\nconst Pagination = ({ isLoading, page, pages, changePage }) => (\r\n  <div className=\"pagination\">\r\n    <PaginationButton\r\n      disabled={isLoading || page === 1}\r\n      onClick={() => changePage(page - 1)}\r\n      text={<Icon>chevron_left</Icon>}\r\n    />\r\n    {Array(pages).fill().map((_, i) => (\r\n      <PaginationButton\r\n        key={i}\r\n        disabled={isLoading}\r\n        active={page === i + 1}\r\n        onClick={() => changePage(i + 1)}\r\n        text={i + 1}\r\n      />\r\n    ))}\r\n    <PaginationButton\r\n      disabled={isLoading || page === pages}\r\n      onClick={() => changePage(page + 1)}\r\n      text={<Icon>chevron_right</Icon>}\r\n    />\r\n  </div>\r\n);\r\n\r\nexport default Pagination;\r\n","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport Icon from 'components/icon';\r\nimport status from 'status';\r\n\r\nexport const Error = ({ error, big, tryAgain }) => (\r\n  <div className=\"error\">\r\n    <div className=\"error-message\">\r\n      <Icon>\r\n        error\r\n      </Icon>\r\n      { error.message }\r\n    </div>\r\n    { big && <button onClick={tryAgain}>Try again</button>}\r\n  </div>\r\n);\r\n\r\nexport const LoadingBar = ({ big }) => (\r\n  <div\r\n    style={{\r\n      transform: big ? 'scale(3)' : 'none'\r\n    }}\r\n    className=\"lds-ellipsis\"\r\n  >\r\n    <div /> <div /> <div /> <div />\r\n  </div>\r\n);\r\n\r\nconst ResourceStatus = ({ callHistory, big, tryAgain }) => {\r\n  const feedbackComponents = {\r\n    [status.ERROR]: (\r\n      <Error big={big} tryAgain={tryAgain} error={callHistory.error} />\r\n    ),\r\n    [status.LOADING]: (\r\n      <LoadingBar big={big} />\r\n    )\r\n  };\r\n\r\n  return (\r\n    <div className={classNames('feedback-container', { big })}>\r\n      { feedbackComponents[callHistory.status] }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResourceStatus;\r\n","import React from 'react';\r\nimport Icon from 'components/icon';\r\n\r\nconst HistoryItem = ({ to, date, type }) => (\r\n  <li className=\"history-item\">\r\n    <span className=\"history-item--number\">\r\n      <Icon>\r\n        { type }\r\n      </Icon>\r\n      {`${to[0]} ${to.slice(1,3)} ${to.slice(4)}`}\r\n    </span>\r\n    <span className=\"history-item--date\">\r\n      {new Date(date).toLocaleDateString() + ' ' + new Date(date).toLocaleTimeString()}\r\n    </span>\r\n  </li>\r\n);\r\n\r\nexport default HistoryItem;\r\n","import React from 'react';\r\nimport { bindActionCreators } from 'redux';\r\nimport { Provider, connect } from 'react-redux';\r\nimport store from 'store';\r\nimport { getCallHistory } from 'actions';\r\nimport status from 'status';\r\nimport Pagination from 'components/pagination';\r\nimport ResourceStatus from 'components/resource-status';\r\nimport HistoryItem from 'components/history-item';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.props.getCallHistory();\r\n  }\r\n\r\n  changePage = (page) => {\r\n    this.props.getCallHistory(page);\r\n  }\r\n  \r\n  renderInitialState() {\r\n    const { callHistory } = this.props;\r\n\r\n    return (\r\n      <div className=\"app-container loading\">\r\n        <ResourceStatus\r\n          big\r\n          callHistory={callHistory}\r\n          tryAgain={() => this.props.getCallHistory()}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  renderApp() {\r\n    const { callHistory } = this.props;\r\n\r\n    return (\r\n      <div className=\"app-container\">\r\n        <Pagination\r\n          isLoading={callHistory.status === status.LOADING}\r\n          changePage={this.changePage}\r\n          { ...callHistory.pagination }\r\n        />\r\n        <ResourceStatus callHistory={callHistory} />\r\n        <ul className=\"history-container\">\r\n          {callHistory.data.map((item) => (\r\n            <HistoryItem key={item.to} { ...item } />\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { callHistory } = this.props;\r\n    if (callHistory.isInitalState) {\r\n      return this.renderInitialState();\r\n    }\r\n\r\n    return this.renderApp();\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  callHistory: state\r\n});\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  getCallHistory: bindActionCreators(getCallHistory, dispatch)\r\n});\r\nconst ConnectedApp = connect(mapStateToProps, mapDispatchToProps)(App);\r\n\r\nexport default () => (\r\n  <Provider store={store}>\r\n    <ConnectedApp />\r\n  </Provider>\r\n);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport './index.css';\nimport 'material-icons/iconfont/material-icons.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}